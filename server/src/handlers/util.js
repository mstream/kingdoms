// @flow

import type {
    APIGatewayEventRequestContext,
    APIGatewayProxyEvent,
    Context,
    CustomAuthorizerEvent,
} from './types';

const emptyApiGatewayEventRequestContext: APIGatewayEventRequestContext = {
    accountId: '',
    apiId: '',
    authorizer: {},
    connectedAt: 0,
    connectionId: '',
    domainName: '',
    domainPrefix: '',
    eventType: '',
    extendedRequestId: '',
    protocol: '',
    httpMethod: '',
    identity: {
        accessKey: null,
        accountId: null,
        apiKey: null,
        apiKeyId: null,
        caller: null,
        cognitoAuthenticationProvider: null,
        cognitoAuthenticationType: null,
        cognitoIdentityId: null,
        cognitoIdentityPoolId: null,
        principalOrgId: null,
        sourceIp: '',
        user: null,
        userAgent: null,
        userArn: null,
    },
    messageDirection: '',
    messageId: '',
    path: '',
    stage: '',
    requestId: '',
    requestTime: '',
    requestTimeEpoch: 0,
    resourceId: '',
    resourcePath: '',
    routeKey: '',
};

export const emptyApiGatewayProxyEvent: APIGatewayProxyEvent = {
    body: null,
    headers: {},
    multiValueHeaders: {},
    httpMethod: '',
    isBase64Encoded: false,
    path: '',
    pathParameters: {},
    queryStringParameters: {},
    multiValueQueryStringParameters: {},
    stageVariables: {},
    requestContext: emptyApiGatewayEventRequestContext,
    resource: '',
};

export const emptyCustomAuthorizerEvent: CustomAuthorizerEvent = {
    type: '',
    methodArn: '',
    authorizationToken: '',
    resource: '',
    path: '',
    httpMethod: '',
    headers: {},
    multiValueHeaders: {},
    pathParameters: {},
    queryStringParameters: {},
    multiValueQueryStringParameters: {},
    stageVariables: {},
    requestContext: {
        ...emptyApiGatewayEventRequestContext,
    },
    domainName: '',
    apiId: '',
};

export const emptyContext: Context = {
    callbackWaitsForEmptyEventLoop: false,
    functionName: '',
    functionVersion: '',
    invokedFunctionArn: '',
    memoryLimitInMB: '',
    awsRequestId: '',
    logGroupName: '',
    logStreamName: '',
    identity: {
        cognitoIdentityId: '',
        cognitoIdentityPoolId: '',
    },
    clientContext: {
        client: {
            installationId: '',
            appTitle: '',
            appVersionName: '',
            appVersionCode: '',
            appPackageName: '',
        },
        Custom: undefined,
        env: {
            platformVersion: '',
            platform: '',
            make: '',
            model: '',
            locale: '',
        },
    },
    getRemainingTimeInMillis: () => 0,
    done: () => undefined,
    fail: () => undefined,
    succeed: () => undefined,
};
