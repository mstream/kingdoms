AWSTemplateFormatVersion: '2010-09-09'


Transform: 'AWS::Serverless-2016-10-31'


Parameters:

    NetworkStackName:
        Type: 'String'

    PersistenceStackName:
        Type: 'String'

    Environment:
        Type: 'String'
        AllowedValues:
            - 'dev'
            - 'prod'

    StageName:
        Type: 'String'
        Default: 'Stage'

    WebContentTtl:
        Type: 'Number'

    NodeRuntime:
        Type: 'String'
        Default: 'nodejs12.x'

    LayerArn:
        Type: 'String'
        Default: 'arn:aws:lambda:eu-west-1:235338379175:layer:common:1'


Resources:

    AuthenticateFunction:
        Type: 'AWS::Serverless::Function'
        Properties:
            CodeUri: 'src/handlers/authenticate/'
            Handler: 'app.handler'
            MemorySize: 256
            Runtime: 'nodejs12.x'
            Layers:
                - !Sub '${LayerArn}'
            VpcConfig:
                SecurityGroupIds:
                    -   Fn::ImportValue: !Sub '${PersistenceStackName}-RedisClientSecurityGroupId'
                SubnetIds:
                    -   Fn::ImportValue: !Sub '${NetworkStackName}-PrivateSubnet'
            Environment:
                Variables:
                    API_GATEWAY_ENDPOINT: !Sub '${WebSocket}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
                    COGNITO_REGION: !Sub '${AWS::Region}'
                    COGNITO_USER_POOL_ID: !Sub '${UserPool}'
                    ENVIRONMENT: !Sub '${Environment}'
                    REDIS_HOST:
                        Fn::ImportValue: !Sub '${PersistenceStackName}-RedisHost'
                    REDIS_PORT:
                        Fn::ImportValue: !Sub '${PersistenceStackName}-RedisPort'

    OnConnectFunction:
        Type: 'AWS::Serverless::Function'
        Properties:
            CodeUri: 'src/handlers/on-connect/'
            Handler: 'app.handler'
            MemorySize: 256
            Runtime: 'nodejs12.x'
            Layers:
                - !Sub '${LayerArn}'
            VpcConfig:
                SecurityGroupIds:
                    -   Fn::ImportValue: !Sub '${PersistenceStackName}-RedisClientSecurityGroupId'
                SubnetIds:
                    -   Fn::ImportValue: !Sub '${NetworkStackName}-PrivateSubnet'
            Environment:
                Variables:
                    API_GATEWAY_ENDPOINT: !Sub '${WebSocket}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
                    COGNITO_REGION: !Sub '${AWS::Region}'
                    COGNITO_USER_POOL_ID: !Sub '${UserPool}'
                    ENVIRONMENT: !Sub '${Environment}'
                    REDIS_HOST:
                        Fn::ImportValue: !Sub '${PersistenceStackName}-RedisHost'
                    REDIS_PORT:
                        Fn::ImportValue: !Sub '${PersistenceStackName}-RedisPort'

    OnDisconnectFunction:
        Type: 'AWS::Serverless::Function'
        Properties:
            CodeUri: 'src/handlers/on-disconnect/'
            Handler: 'app.handler'
            MemorySize: 256
            Runtime: 'nodejs12.x'
            Layers:
                - !Sub '${LayerArn}'
            VpcConfig:
                SecurityGroupIds:
                    -   Fn::ImportValue: !Sub '${PersistenceStackName}-RedisClientSecurityGroupId'
                SubnetIds:
                    -   Fn::ImportValue: !Sub '${NetworkStackName}-PrivateSubnet'
            Environment:
                Variables:
                    API_GATEWAY_ENDPOINT: !Sub '${WebSocket}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
                    COGNITO_REGION: !Sub '${AWS::Region}'
                    COGNITO_USER_POOL_ID: !Sub '${UserPool}'
                    ENVIRONMENT: !Sub '${Environment}'
                    REDIS_HOST:
                        Fn::ImportValue: !Sub '${PersistenceStackName}-RedisHost'
                    REDIS_PORT:
                        Fn::ImportValue: !Sub '${PersistenceStackName}-RedisPort'

    SendMessageFunction:
        Type: 'AWS::Serverless::Function'
        Properties:
            CodeUri: 'src/handlers/send-message/'
            Handler: 'app.handler'
            MemorySize: 1024
            Runtime: 'nodejs12.x'
            Layers:
                - !Sub '${LayerArn}'
            VpcConfig:
                SecurityGroupIds:
                    -   Fn::ImportValue: !Sub '${PersistenceStackName}-RedisClientSecurityGroupId'
                SubnetIds:
                    -   Fn::ImportValue: !Sub '${NetworkStackName}-PrivateSubnet'
            Environment:
                Variables:
                    API_GATEWAY_ENDPOINT: !Sub '${WebSocket}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
                    COGNITO_REGION: !Sub '${AWS::Region}'
                    COGNITO_USER_POOL_ID: !Sub '${UserPool}'
                    ENVIRONMENT: !Sub '${Environment}'
                    REDIS_HOST:
                        Fn::ImportValue: !Sub '${PersistenceStackName}-RedisHost'
                    REDIS_PORT:
                        Fn::ImportValue: !Sub '${PersistenceStackName}-RedisPort'
            Policies:
                -   Statement:
                        -   Effect: 'Allow'
                            Action:
                                - 'execute-api:ManageConnections'
                            Resource:
                                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/*'

    UpdateStateFunction:
        Type: 'AWS::Serverless::Function'
        Properties:
            CodeUri: 'src/handlers/update-state/'
            Handler: 'app.handler'
            MemorySize: 1024
            Runtime: 'nodejs12.x'
            Layers:
                - !Sub '${LayerArn}'
            VpcConfig:
                SecurityGroupIds:
                    -   Fn::ImportValue: !Sub '${PersistenceStackName}-RedisClientSecurityGroupId'
                SubnetIds:
                    -   Fn::ImportValue: !Sub '${NetworkStackName}-PrivateSubnet'
            Events:
                StateUpdateScheduledEvent:
                    Type: 'Schedule'
                    Properties:
                        Schedule: 'rate(1 minute)'
            Environment:
                Variables:
                    API_GATEWAY_ENDPOINT: !Sub '${WebSocket}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
                    COGNITO_REGION: !Sub '${AWS::Region}'
                    COGNITO_USER_POOL_ID: !Sub '${UserPool}'
                    ENVIRONMENT: !Sub '${Environment}'
                    REDIS_HOST:
                        Fn::ImportValue: !Sub '${PersistenceStackName}-RedisHost'
                    REDIS_PORT:
                        Fn::ImportValue: !Sub '${PersistenceStackName}-RedisPort'
            Policies:
                -   Statement:
                        -   Effect: 'Allow'
                            Action:
                                - 'execute-api:ManageConnections'
                            Resource:
                                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/*'

    ResetStateFunction:
        Type: 'AWS::Serverless::Function'
        Properties:
            CodeUri: 'src/handlers/reset-state/'
            Handler: 'app.handler'
            MemorySize: 256
            Runtime: 'nodejs12.x'
            Layers:
                - !Sub '${LayerArn}'
            VpcConfig:
                SecurityGroupIds:
                    -   Fn::ImportValue: !Sub '${PersistenceStackName}-RedisClientSecurityGroupId'
                SubnetIds:
                    -   Fn::ImportValue: !Sub '${NetworkStackName}-PrivateSubnet'
            Environment:
                Variables:
                    API_GATEWAY_ENDPOINT: !Sub '${WebSocket}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
                    COGNITO_REGION: !Sub '${AWS::Region}'
                    COGNITO_USER_POOL_ID: !Sub '${UserPool}'
                    ENVIRONMENT: !Sub '${Environment}'
                    REDIS_HOST:
                        Fn::ImportValue: !Sub '${PersistenceStackName}-RedisHost'
                    REDIS_PORT:
                        Fn::ImportValue: !Sub '${PersistenceStackName}-RedisPort'

    WebSocket:
        Type: 'AWS::ApiGatewayV2::Api'
        Properties:
            Name: 'WebSocket'
            ProtocolType: 'WEBSOCKET'
            RouteSelectionExpression: '$request.body.message'

    WebSocketAuthorizer:
        Type: 'AWS::ApiGatewayV2::Authorizer'
        Properties:
            Name: !Sub '${AWS::StackName}'
            ApiId: !Sub '${WebSocket}'
            AuthorizerType: 'REQUEST'
            AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthenticateFunction.Arn}/invocations'
            IdentitySource:
                - 'route.request.querystring.token'

    AuthenticatePermission:
        Type: 'AWS::Lambda::Permission'
        DependsOn:
            - 'WebSocket'
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !Sub '${AuthenticateFunction}'
            Principal: 'apigateway.amazonaws.com'
            SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocket}/authorizers/${WebSocketAuthorizer}'

    OnConnectPermission:
        Type: 'AWS::Lambda::Permission'
        DependsOn:
            - 'WebSocket'
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !Sub '${OnConnectFunction}'
            Principal: 'apigateway.amazonaws.com'

    OnDisconnectPermission:
        Type: 'AWS::Lambda::Permission'
        DependsOn:
            - 'WebSocket'
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !Sub '${OnDisconnectFunction}'
            Principal: 'apigateway.amazonaws.com'

    SendMessagePermission:
        Type: 'AWS::Lambda::Permission'
        DependsOn:
            - 'WebSocket'
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !Sub '${SendMessageFunction}'
            Principal: 'apigateway.amazonaws.com'

    ConnectIntegration:
        Type: 'AWS::ApiGatewayV2::Integration'
        Properties:
            ApiId: !Sub '${WebSocket}'
            Description: 'Connect Integration'
            IntegrationType: 'AWS_PROXY'
            IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations'

    DisconnectIntegration:
        Type: 'AWS::ApiGatewayV2::Integration'
        Properties:
            ApiId: !Sub '${WebSocket}'
            Description: 'Disconnect Integration'
            IntegrationType: 'AWS_PROXY'
            IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations'

    SendIntegration:
        Type: 'AWS::ApiGatewayV2::Integration'
        Properties:
            ApiId: !Sub '${WebSocket}'
            Description: 'Send Integration'
            IntegrationType: 'AWS_PROXY'
            IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations'

    ConnectRoute:
        Type: 'AWS::ApiGatewayV2::Route'
        Properties:
            ApiId: !Sub '${WebSocket}'
            RouteKey: '$connect'
            AuthorizationType: 'CUSTOM'
            AuthorizerId: !Sub '${WebSocketAuthorizer}'
            OperationName: 'ConnectRoute'
            Target: !Sub 'integrations/${ConnectIntegration}'

    DisconnectRoute:
        Type: 'AWS::ApiGatewayV2::Route'
        Properties:
            ApiId: !Sub '${WebSocket}'
            RouteKey: '$disconnect'
            AuthorizationType: 'NONE'
            OperationName: 'DisconnectRoute'
            Target: !Sub 'integrations/${DisconnectIntegration}'

    SendRoute:
        Type: 'AWS::ApiGatewayV2::Route'
        Properties:
            ApiId: !Sub '${WebSocket}'
            RouteKey: 'sendmessage'
            AuthorizationType: 'NONE'
            OperationName: 'SendRoute'
            Target: !Sub 'integrations/${SendIntegration}'

    Deployment:
        Type: 'AWS::ApiGatewayV2::Deployment'
        DependsOn:
            - 'ConnectRoute'
            - 'DisconnectRoute'
            - 'SendRoute'
        Properties:
            ApiId: !Sub '${WebSocket}'

    Stage:
        Type: 'AWS::ApiGatewayV2::Stage'
        Properties:
            StageName: !Sub '${StageName}'
            Description: 'Default stage'
            DeploymentId: !Sub '${Deployment}'
            ApiId: !Sub '${WebSocket}'

    WebsiteBucket:
        Type: 'AWS::S3::Bucket'
        DeletionPolicy: 'Delete'
        Properties:
            BucketName: !Sub 'www.${Environment}.kingdoms.maciej-laciak.com'
            AccessControl: 'PublicRead'
            WebsiteConfiguration:
                ErrorDocument: 'error.html'
                IndexDocument: 'index.html'
            Tags:
                -   Key: 'Name'
                    Value: !Sub '${AWS::StackName}-website'

    OriginAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: 'origin access identity for the website bucket'

    WebsiteDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Enabled: 'true'
                PriceClass: 'PriceClass_100'
                ViewerCertificate:
                    CloudFrontDefaultCertificate: 'true'
                DefaultRootObject: index.html
                DefaultCacheBehavior:
                    Compress: 'true'
                    MinTTL: !Sub '${WebContentTtl}'
                    MaxTTL: !Sub '${WebContentTtl}'
                    DefaultTTL: !Sub '${WebContentTtl}'
                    ForwardedValues:
                        QueryString: true
                    TargetOriginId: 's3-origin'
                    ViewerProtocolPolicy: 'redirect-to-https'
                Origins:
                    -   Id: 's3-origin'
                        DomainName: !Sub '${WebsiteBucket}.s3-${AWS::Region}.amazonaws.com'
                        S3OriginConfig:
                            OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${OriginAccessIdentity}'

    UserPool:
        Type: 'AWS::Cognito::UserPool'
        Properties:
            UserPoolName: !Sub '${AWS::StackName}'

    UserPoolClient:
        Type: 'AWS::Cognito::UserPoolClient'
        Properties:
            ClientName: !Sub '${AWS::StackName}'
            UserPoolId: !Sub '${UserPool}'
            AllowedOAuthFlowsUserPoolClient: 'true'
            SupportedIdentityProviders:
                - 'COGNITO'
            AllowedOAuthFlows:
                - 'implicit'
            AllowedOAuthScopes:
                - 'openid'
                - 'email'
            CallbackURLs:
                - !Sub 'https://${WebsiteDistribution.DomainName}'
                - 'http://localhost:8080'
            LogoutURLs:
                - !Sub 'https://${WebsiteDistribution.DomainName}'
                - 'http://localhost:8080'
            DefaultRedirectURI: !Sub 'https://${WebsiteDistribution.DomainName}'

    UserPoolDomain:
        Type: 'AWS::Cognito::UserPoolDomain'
        Properties:
            UserPoolId: !Sub '${UserPool}'
            Domain: !Sub '${Environment}-kingdoms'


Outputs:

    WebSocketUrl:
        Description: 'The WSS Protocol URL'
        Value: !Sub 'wss://${WebSocket}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'

    WebsiteUrl:
        Description: 'The website URL'
        Value: !Sub 'https://${WebsiteDistribution.DomainName}'

    AuthWebsiteUrl:
        Description: 'The auth website URL'
        Value: !Sub 'https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'

    UserPoolId:
        Description: 'User pool ID'
        Value: !Sub '${UserPool}'

    UserPoolClientId:
        Description: 'User pool client ID'
        Value: !Sub '${UserPoolClient}'

